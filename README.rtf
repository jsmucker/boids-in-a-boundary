{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 CREDIT:\
 * Visualization:\
 * Copyright (c) https://learnopengl.com/Getting-started/Hello-Triangle\
 * License: https://creativecommons.org/licenses/by-nc/4.0/legalcode\
 * Joey de Vries\
 * https://learnopengl.com\
 * https://twitter.com/JoeyDeVriez.\
 \
 * Also, uses boid/boundary functions from a javascript code: \
 * https://github.com/aquillen/boids_oval\
 \
\
INSTALLATION: \
Need to have openGL, glfw3, and GLAD installed. Also xcode command line tools. Put glad.c in main directory.\
\
\
RUNNING:\
There is a unix executable already made in /dist/Debug/GNU-MacOSX/boid_new. You should be able to double click it and run.\
If you change the code, write the following into terminal:\
\
cd directory_that_includes_main.c\
/usr/bin/make -f Makefile CONF=Debug\
/Library/Developer/CommandLineTools/usr/bin/make -f nbproject/Makefile-Debug.mk QMAKE= SUBPROJECTS= .build-conf\
/Library/Developer/CommandLineTools/usr/bin/make  -f nbproject/Makefile-Debug.mk dist/Debug/GNU-MacOSX/boid_new\
mkdir -p build/Debug/GNU-MacOSX\
rm -f build/Debug/GNU-MacOSX/main.o.d\
gcc    -c -g -MMD -MP -MF build/Debug/GNU-MacOSX/main.o.d -o build/Debug/GNU-MacOSX/main.o main.c\
mkdir -p dist/Debug/GNU-MacOSX\
gcc     -o dist/Debug/GNU-MacOSX/boid_new build/Debug/GNU-MacOSX/main.o -lglfw glad.c\
\
To run:\
./dist/Debug/GNU-MacOSX/boid_new\
\
\
CHANGING PARAMETERS:\
Parameters can be varied in param.h.\
\
\
HOTKEYS:\
escape: closes window\
p: prints particle positions to file\
\
h: toggles 3d histogram\
t: changes between position and velocity \
arrow keys and m/n: rotate histogram\
s: toggle slow histogram mode\
\
d: remove all boids\
j: restart simulation\
q: classify simulation and create parameter textfile\
c: just classify the simulation\
l: load a parameter file (need to give index)\
\
\
OTHER FEATURES: \
There are sliders in the top left of the simulation window, but there is not text labeling them. If you want to add more sliders, take a look at the slider.h header file. The order is as follows:\
Repel force amplitude\
Align force amplitude\
Repel distance\
Align distance\
hinge force amplitude\
spring constant ks\
node/boid mass ratio\
\
classify.h contains the functions used in classifying each simulation. I\'92ve included my variation.c (need to change to main.c in order to run properly) file that runs this on a loop producing a bunch of parameter files for plotting in python. If you want to change which parameters to vary, take a look at the classify.h file. The python script that reads each file is included too.\
\
\
CURRENT ISSUES:\
Segmentation fault will occur if boundary explodes and tree mode is activated. This can be fixed by decreasing the time step dt\
\
Loading a file will mess up hinge_amp. hinge_amp updating is disabled for now.\
\
Slider endpoints are not quite right, you can adjust sliders past their maximum width. }